#!/usr/bin/env zsh

PS1='
%{%B%}%{%b%}%{%B%F{blue}%}%(4~||)%3~%{%b%f%}%{%B%}
%{%b%}%{%B%}%{%b%}%{%B%F{green}%}$> %{%b%f%}%{%B%}%{%b%}'

declare -A ZPLGM
ZPLGM[HOME_DIR]=$HOME/.zplugin

if [[ ! -d ${ZPLGM[HOME_DIR]} ]]; then
  mkdir ${ZPLGM[HOME_DIR]};
  git clone https://github.com/zdharma/zplugin.git ${ZPLGM[HOME_DIR]}/bin;
  zcompile ${ZPLGM[HOME_DIR]}/bin/zplugin.zsh
fi

source ${ZPLGM[HOME_DIR]}/bin/zplugin.zsh
autoload -Uz _zplugin
(( ${+_comps} )) && _comps[zplugin]=_zplugin

fpath=(
  $ZDOTDIR/functions
  $ZDOTDIR/completions
  $HOME/.emacs.d/bin
  $HOME/.cargo/bin \
  "${fpath[@]}"
)

##===  VARIABLES  === {{{
LC_ALL="en_ZA.UTF-8"

#export ALTERNATE_EDITOR=""
#export EDITOR='emacsclient -n -c'
#export VISUAL="emacsclient -c -a emacs"

export ENHANCD_FILTER='fzf --reverse:fzy'
export FZF_DEFAULT_COMMAND="fd --type file --color=always"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd . -t d"
export FZF_TMUX_HEIGHT=80%
export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_PLUGINS_ALIAS_TIPS_TEXT=$'\033[01;33mðŸ’¡  '
export POWERLEVEL9K_MODE="awesome-patched"

export GNUPGHOME=$HOME/.config/gnupg
export GPG_TTY=$(tty)
export MANPAGER='nvim +Man!'
export RANGER_LOAD_DEFAULT_RC=FALSE
export JAVA_HOME="/usr/lib/jvm/openjdk"
export XENVIRONMENT="${HOME}/.Xresources"
#export RUST_SRC_PATH="$(rustc --print sysroot)/lib/rustlib/src/rust/src"

HISTFILE=~/.zsh/zsh_history
HISTSIZE=100000
SAVEHIST=100000
HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1                # all search results returned will be unique
setopt incappendhistory                                 # add commmand to history as soon as it's entered
setopt extendedhistory                                  # save command timestamp
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_SAVE_NO_DUPS                                # don't write duplicate entries in the history file
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE                                # prefix commands you don't want stored with a space
HISTORY_IGNORE="(ls|cd *|pwd|exit|r|open|x *|kill *)"
setopt NO_HUP                                           # don't kill jobs
setopt NO_CHECK_JOBS
setopt correct                                          # spelling correction for commands
setopt autocd
unsetopt rm_star_silent                                 # ask for confirmation for `rm *' or `rm path/*'
setopt interactivecomments

typeset -gA FAST_HIGHLIGHT_STYLES
FAST_HIGHLIGHT_STYLES[alias]="fg=012"
FAST_HIGHLIGHT_STYLES[path]="fg=blue"
FAST_HIGHLIGHT_STYLES[path-to-dir]="fg=blue,underline"
FAST_HIGHLIGHT_STYLES[suffix-alias]="fg=012"
FAST_HIGHLIGHT_STYLES[builtin]="fg=012"
FAST_HIGHLIGHT_STYLES[function]="fg=012"
FAST_HIGHLIGHT_STYLES[precommand]="fg=red,bg=black,underline,bold"
FAST_HIGHLIGHT_STYLES[command]="fg=012"
FAST_HIGHLIGHT_STYLES[commandseparator]="fg=012"
FAST_HIGHLIGHT_STYLES[single-hyphen-option]="fg=047"
FAST_HIGHLIGHT_STYLES[comment]="fg=011,bold"
FAST_HIGHLIGHT_STYLES[single-quoted-argument]="fg=011"
FAST_HIGHLIGHT_STYLES[double-quoted-argument]="fg=011"
FAST_HIGHLIGHT_STYLES[dollar-quoted-argument]="fg=011"
FAST_HIGHLIGHT_STYLES[single-hyphen-option]="fg=080"
FAST_HIGHLIGHT_STYLES[double-hyphen-option]="fg=215"

# }}}


##===  PLUGINS  ==={{{

## === THEMES === {{{
zpl ice lucid atclone"ln -sf $ZDOTDIR/.purepower .purepower" \
  atpull"%atclone" run-atpull src".purepower" compile"{functions/*.zsh,gitstatus/*.zsh}"
zpl light romkatv/powerlevel10k
zpl env-whitelist 'POWERLEVEL9K_*'
# }}}

zpl ice wait lucid atload'unalias run-help'

zpl ice wait'0a' lucid \
  atload"HISTORY_SUBSTRING_SEARCH_HIGHLIGHT_FOUND='bg=blue,fg=232,bold'"
zpl light "zsh-users/zsh-history-substring-search"

zpl ice wait"0b" lucid atinit"_zcomp; zpcdreplay"
zpl light "zdharma/fast-syntax-highlighting"

zpl ice wait'0c' lucid atload'_zsh_autosuggest_start; '
zpl light "zsh-users/zsh-autosuggestions"

zpl ice wait"2a" lucid blockf
zpl light "zsh-users/zsh-completions"
zpl ice wait'2b' lucid
zpl snippet "OMZ::lib/completion.zsh"

zpl ice wait"2c" lucid wait"[[ -d .git ]]"
zpl snippet "OMZ::plugins/git/git.plugin.zsh"
zpl ice wait"2d" lucid wait"[[ -d .git ]]"
zpl snippet "OMZ::plugins/git-extras/git-extras.plugin.zsh"
zpl ice wait"2e" lucid
zpl light "wfxr/forgit"

zpl ice wait"2f" lucid pick"init.sh"
zpl light "b4b4r07/enhancd"
zpl ice wait"2g" lucid
zpl light "changyuheng/zsh-interactive-cd"

zpl ice wait'3' lucid
zpl light djui/alias-tips

#zpl light "willghatch/zsh-cdr"
#zpl light "zsh-users/zaw"

#zpl ice wait"2" lucid nocompletions
#zpl light "hlissner/zsh-autopair"

#zpl ice wait"2" lucid
#zpl snippet "OMZ::plugins/ssh-agent/ssh-agent.plugin.zsh"

zpl ice wait"0" lucid from"gh-r" as"program" \
  atload'_fzf_compgen_path() { fd --type f --hidden --follow --exclude ".git" . "$1" }; \
         _fzf_compgen_dir() { fd --type d --hidden --follow --exclude ".git" . "$1" }'
zpl light junegunn/fzf-bin
if [[ $(type -p fzf) ]] then
  zpl ice wait"2i" lucid multisrc"shell/{key-bindings,completion}.zsh" pick""
  zpl light "junegunn/fzf"
fi
zpl ice wait"1" lucid id-as"base16-fzf" atclone"sleep 2; sed -i '27i\  --ansi \n  --reverse' base16-fzf" atpull'%atclone'
zpl snippet "https://raw.githubusercontent.com/nicodebo/base16-fzf/master/bash/base16-tomorrow-night.config"


zpl ice wait"2" lucid
zpl snippet "OMZ::plugins/extract/extract.plugin.zsh"
#zpl ice wait"2" lucid
#zpl snippet "OMZ::plugins/sudo/sudo.plugin.zsh"
#zpl ice wait"2" lucid
#zpl snippet "OMZ::plugins/fancy-ctrl-z/fancy-ctrl-z.plugin.zsh"

if [[ ! -d ~/.rbenv/plugins ]] then
   echo "Creating \$(rbenv root)/plugins"
   mkdir -p ~/.rbenv/plugins
   if [[ ! -d ~/.rbenv/plugins/ruby-build ]] then
      echo "Cloning \$(rbenv root)/plugins/ruby-build"
      git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
   fi
fi
zpl ice svn wait"3a" wait"[[ -f Gemfile || -f Rakefile ]]" \
  atload"POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW=true" \
  unload"![[ ! -e Gemfile || ! -e Rakefile ]]"
zpl snippet "PZT::modules/ruby/"
#zpl ice wait"3a" lucid wait"[[ -f Gemfile || -f Rakefile ]]" unload"[[ ! -f Gemfile ]]"
#zpl snippet "OMZ::plugins/rbenv/rbenv.plugin.zsh"

zpl ice wait"3b" lucid mv"*cht.sh -> cht" pick"cht" as"program" id-as"cht.sh"
zpl snippet "https://cht.sh/:cht.sh"
#zpl ice wait"2" lucid id-as"tldr" as"program" pick"tldr"
#zpl snippet "https://raw.githubusercontent.com/raylee/tldr/master/tldr"

zpl ice lucid mv"ps_mem.py -> psmem" pick"psmem" as"program"
zpl light "pixelb/ps_mem"

zpl ice wait"3d" lucid as"program" pick"bin/git-dsf"
zpl light "zdharma/zsh-diff-so-fancy"

zpl ice svn \
  atclone"sed -i '13d; 51d; s|\$ZSH/plugins|\$ZPLGM[SNIPPETS_DIR]/OMZ::plugins|' emacs.plugin.zsh"
zpl snippet "OMZ::plugins/emacs"

#zpl ice pick"fasd" as"program"
#zpl snippet "https://raw.githubusercontent.com/clvv/fasd/master/fasd"
#zpl snippet "OMZ::plugins/fasd/fasd.plugin.zsh"

#zpl ice wait'2j' lucid atload'[[ -r ~/.base16_theme ]] || base16_tomorrow-night'
#zpl light "chriskempson/base16-shell"

zpl ice wait'2k' lucid atclone"dircolors -b LS_COLORS > c.zsh; sed -i 's/30/12/g; s/172/11/g; s/196/9/g' c.zsh;" \
  atpull'%atclone' pick"c.zsh" nocompile'!'
zpl light trapd00r/LS_COLORS

zpl ice lucid from"gh-r" as"program" bpick"*linux*" mv"lsd* -> lsd" pick"lsd/lsd"
zpl light "Peltoche/lsd"

# Local plugins
#zpl ice wait'2' lucid as"program" pick"colorblocks"
#zpl snippet /home/mustaqim/.local/bin/scripts/colorblocks

#zpl ice wait'2' lucid as"program" pick"build/release/peaclock" atclone"./build.sh"
#zpl light "octobanana/peaclock"

zpl ice wait"2" lucid as"program" pick"heroku"
zpl light "$HOME/.local/bin/heroku/bin"
zpl ice wait"2" lucid cloneonly
zpl snippet "OMZ::plugins/heroku/heroku.plugin.zsh"


# }}}

# Compile to decrease startup speed (only if $1 is older than a day)
_zcompare() {
  # - '#q' is an explicit glob qualifier that makes globbing work within zsh's [[ ]] construct.
  # - 'N' makes the glob pattern evaluate to nothing when it doesn't match (rather than throw a globbing error)
  # - '.' matches "regular files"
  # - 'mh+24' matches files (or directories or whatever) that are older than 24 hours.
  setopt extendedglob local_options
  if [[ -n "${1}"(#qN.mh+4) && (! -s "${1}.zwc" || "$1" -nt "${1}.zwc") ]]; then
    ZPLGM[COMPINIT_OPTS]=-C; zpcompinit
    zcompile ${1}
  fi
}
_zcomp() {
  zshrc="${ZDOTDIR}/.zshrc"
  zcompdump="${ZDOTDIR}/.zcompdump"
  _zcompare "$zshrc"
  _zcompare "$zcompdump"
}

if [ ! -S ~/.ssh/ssh_auth_sock ]; then
  eval `ssh-agent`
  ln -sf "$SSH_AUTH_SOCK"    ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
#ssh-add -l > /dev/null || ssh-add
ssh-add -q $HOME/.ssh/GitLab > /dev/null || ssh-add
ssh-add -q $HOME/.ssh/GitHub > /dev/null || ssh-add

#case $TERM in
#    termite|*xterm*|rxvt|rxvt-unicode|rxvt-256color|rxvt-unicode-256color|(dt|k|E)term)
#        preexec () { print -Pn "\e]0; $PWD - UXTerm\a" }
#        print -Pn "\e]83;title \"$1\"\a"
#        ;;
#esac

zshaddhistory() {
  whence ${${(z)1}[1]} >| /dev/null || return 1 }       # Don't add wrong commands to history

function exists() {
  (( ${+commands[$1]} ))
}

fb() {
    filebot -rename "$@" -non-strict --format "{e} - {t}"
}

# Copy and Paste for `st`
x-kill-region () {
  zle kill-region
  print -rn $CUTBUFFER | xsel -i -b
}
zle -N x-kill-region
x-yank () {
  CUTBUFFER=$(xsel -o -b </dev/null)
  zle yank
}
zle -N x-yank
bindkey -e '^X' x-kill-region
bindkey -e '^V' x-yank

fzf-open-file-or-dir() {
  local cmd="fd -j4 -t f -t d -t l 2> /dev/null | sed 1d"
  local out=$(eval $cmd | fzf --exit-0)

  if [ -f "$out" ]; then
    $EDITOR "$out" < /dev/tty
  elif [ -d "$out" ]; then
    cd "$out"
    zle reset-prompt
  fi
}
zle     -N   fzf-open-file-or-dir
bindkey '^P' fzf-open-file-or-dir

bindkey '^[[A'    history-substring-search-up
bindkey '^[[B'    history-substring-search-down
bindkey '^[[1;5C' vi-forward-word
bindkey '^[[1;5D' vi-backward-word
bindkey '^A'      beginning-of-line
bindkey '^E'      end-of-line
bindkey '^Q'      push-line
bindkey '^[[P'    delete-char

zle -N            autosuggest-accept
bindkey '^@'      autosuggest-accept

autoload -U edit-command-line
zle -N edit-command-line
bindkey '^x^e' edit-command-line

#fm(){lf}; zle -N fm
#bindkey 'fj' fm

# Fish-like search completions functionality
zmodload zsh/complist
setopt menucomplete
builtin zstyle ':completion:*'               menu select=0 search

builtin zstyle ':completion:*'               matcher-list '' \
       'm:{a-z\-}={A-Z\_}' \
       'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
       'r:|?=** m:{a-z\-}={A-Z\_}'

builtin zstyle ':completion:*'               completer _complete _match _approximate
builtin zstyle ':completion:*:match:*'       original only
builtin zstyle ':completion:*:approximate:*' max-errors 1 numeric

builtin zstyle ':completion:*'               group-name ''          # Keep directories and files separated
#builtin zstyle ':completion:*'               list-dirs-first true
builtin zstyle ':completion:*'               auto-description
builtin zstyle ':completion:*:manuals'       separate-sections true
builtin zstyle ':completion:*:manuals.*'     insert-sections   true
builtin zstyle ':completion:*:man:*'         menu yes select

builtin zstyle ':completion:*:corrections'   format ' %B%F{green}ï‘„ï‘„ %d (errors: %e) ï‘„ï‘„%f%b'
builtin zstyle ':completion:*:descriptions'  format ' %F{yellow}ï‘„ï‘„ %d ï‘„ï‘„%f'
builtin zstyle ':completion:*:messages'      format ' %B%F{magenta} ï‘„ï‘„ %d ï‘„ï‘„%f%b'
builtin zstyle ':completion:*:warnings'      format ' %B%F{red}ï„ª no matches found ï„ª%f%b'
builtin zstyle ':completion:*'               list-colors "${(@s.:.)LS_COLORS}"

builtin zstyle ':completion::complete:*'     use-cache on
builtin zstyle ':completion:*'               cache-path ~/.zsh/cache

source $ZDOTDIR/aliases

autoload -Uz cdl open fzf_log yadm_log_diff mkcd fz code fh fkill fco gfy plain pb

# generic completions for programs which understand GNU long options(--help)
zpcompdef _gnu_generic fd bat gocryptfs curl fzf tlp-stat

zpcompinit
zplugin cdreplay -q

# vim:ft=zsh:et:fileencoding=utf-8:ft=conf:foldmethod=marker
